// <auto-generated />
using GroupTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GroupTest.Migrations
{
    [DbContext(typeof(GroupContext))]
    [Migration("20240207153749_AddSubject")]
    partial class AddSubject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowGroup", b =>
                {
                    b.Property<int>("FlowsId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.HasKey("FlowsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("FlowGroup");
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupStudent");
                });

            modelBuilder.Entity("GroupTest.DbViews.StudentGroupView", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("StudentGroupView", (string)null);
                });

            modelBuilder.Entity("GroupTest.Entities.Components.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Component");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GroupTest.Entities.Students.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademicGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.StudyUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudyUnits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StudyUnit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<int>("SelfHours")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("StudyPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("Subjects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Subject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StudentGroupView", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroupView");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.ControlComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.Component");

                    b.HasDiscriminator().HasValue("ControlComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.StudyComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.Component");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("GradingType")
                        .HasColumnType("integer");

                    b.Property<int>("Rgr")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("StudyComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.Flow", b =>
                {
                    b.HasBaseType("GroupTest.Entities.StudyUnits.StudyUnit");

                    b.HasDiscriminator().HasValue("Flow");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.Group", b =>
                {
                    b.HasBaseType("GroupTest.Entities.StudyUnits.StudyUnit");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.ControlSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.Subject");

                    b.HasDiscriminator().HasValue("ControlSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.StudySubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.Subject");

                    b.Property<int>("GradingType")
                        .HasColumnType("integer");

                    b.Property<int>("Rgr")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("StudySubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.AttestationComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.ControlComponent");

                    b.Property<int>("AttestationType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AttestationComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.CourseProjectComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.ControlComponent");

                    b.HasDiscriminator().HasValue("CourseProjectComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.PracticeComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.ControlComponent");

                    b.Property<int>("PracticeType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("PracticeComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.AdditionalComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.StudyComponent");

                    b.Property<int>("MaxStudentsCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AdditionalComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.MainComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.StudyComponent");

                    b.Property<int>("Cw")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("MainComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.AcademicFlow", b =>
                {
                    b.HasBaseType("GroupTest.Entities.StudyUnits.Flow");

                    b.HasDiscriminator().HasValue("AcademicFlow");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.AcademicGroup", b =>
                {
                    b.HasBaseType("GroupTest.Entities.StudyUnits.Group");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AcademicGroup");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.StudyGroup", b =>
                {
                    b.HasBaseType("GroupTest.Entities.StudyUnits.Group");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("StudyGroup");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.SubGroup", b =>
                {
                    b.HasBaseType("GroupTest.Entities.StudyUnits.Group");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("SubGroup");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.AttestationSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.ControlSubject");

                    b.HasDiscriminator().HasValue("AttestationSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.CourseProjectSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.ControlSubject");

                    b.HasDiscriminator().HasValue("CourseProjectSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.PracticeSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.ControlSubject");

                    b.HasDiscriminator().HasValue("PracticeSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.AdditionalSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.StudySubject");

                    b.HasDiscriminator().HasValue("AdditionalSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.MainSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.StudySubject");

                    b.Property<int>("Cw")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("MainSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.CommonAdditionalComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.AdditionalComponent");

                    b.HasDiscriminator().HasValue("CommonAdditionalComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.ProfessionalAdditionalComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.AdditionalComponent");

                    b.HasDiscriminator().HasValue("ProfessionalAdditionalComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.MainCommonComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.MainComponent");

                    b.HasDiscriminator().HasValue("MainCommonComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Components.MainProfessionalComponent", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Components.MainComponent");

                    b.HasDiscriminator().HasValue("MainProfessionalComponent");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.AdditionalCommonSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.AdditionalSubject");

                    b.HasDiscriminator().HasValue("AdditionalCommonSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.AdditionalProfessionalSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.AdditionalSubject");

                    b.HasDiscriminator().HasValue("AdditionalProfessionalSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.MainCommonSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.MainSubject");

                    b.HasDiscriminator().HasValue("MainCommonSubject");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.MainProfessionalSubject", b =>
                {
                    b.HasBaseType("GroupTest.Entities.Subjects.MainSubject");

                    b.HasDiscriminator().HasValue("MainProfessionalSubject");
                });

            modelBuilder.Entity("FlowGroup", b =>
                {
                    b.HasOne("GroupTest.Entities.StudyUnits.Flow", null)
                        .WithMany()
                        .HasForeignKey("FlowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupTest.Entities.StudyUnits.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.HasOne("GroupTest.Entities.StudyUnits.StudyGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupTest.Entities.StudyUnits.SubGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupTest.Entities.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTest.Entities.Students.Student", b =>
                {
                    b.HasOne("GroupTest.Entities.StudyUnits.AcademicGroup", "AcademicGroup")
                        .WithMany("Students")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicGroup");
                });

            modelBuilder.Entity("GroupTest.Entities.Subjects.Subject", b =>
                {
                    b.HasOne("GroupTest.Entities.Components.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("StudentGroupView", b =>
                {
                    b.HasOne("GroupTest.Entities.StudyUnits.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupTest.Entities.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.SubGroup", b =>
                {
                    b.HasOne("GroupTest.Entities.StudyUnits.AcademicGroup", "Parent")
                        .WithMany("SubGroups")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GroupTest.Entities.StudyUnits.AcademicGroup", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("SubGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
